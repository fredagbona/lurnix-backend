datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Language {
  en
  fr
}

model User {
  id            String       @id @default(uuid())
  username      String       @unique
  fullname      String
  email         String       @unique
  password_hash String
  isActive      Boolean      @default(true)
  isVerified    Boolean      @default(false)
  language      Language     @default(en)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?
  
  // Email verification functionality
  verificationToken       String?
  verificationTokenExpiry DateTime?
  
  // Password reset functionality
  resetToken       String?
  resetTokenExpiry DateTime?
  
  // Subscription related fields
  subscriptionId      String?
  subscriptionStatus  SubscriptionStatus @default(free)
  subscriptionEndDate DateTime?
  
  // Relations
  quizResults      QuizResult[]
  roadmaps         Roadmap[]
  progresses       Progress[]
  subscription     SubscriptionPlan?    @relation(fields: [subscriptionId], references: [id])
}

model Admin {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  password_hash String
  role          AdminRole @default(manager)
  language      Language  @default(en)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Password reset functionality
  resetToken       String?
  resetTokenExpiry DateTime?
}

enum AdminRole {
  super_admin
  manager
  support
}

// Quiz models
model QuizSection {
  id          String         @id @default(uuid())
  version     Int
  title       String
  description String?
  sortOrder   Int
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  questions   QuizQuestion[]

  @@index([version])
}

model QuizQuestion {
  id             String       @id @default(uuid())
  version        Int
  key            String       @unique
  title          String
  description    String?
  type           String       // 'single' | 'multi' | 'scale'
  weightCategory String?
  sortOrder      Int
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  options        QuizOption[]
  sectionId      String?
  section        QuizSection? @relation(fields: [sectionId], references: [id], onDelete: SetNull)

  @@index([version])
  @@index([sectionId])
}

model QuizOption {
  id          String       @id @default(uuid())
  questionId  String
  label       String
  value       String
  weights     Json         // e.g., { visual:2, handsOn:1, reading:0 }
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  question    QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model QuizResult {
  id              String   @id @default(uuid())
  userId          String
  version         Int
  answers         Json     // raw answers
  computedProfile Json     // resolved profile {style, goal, time, ...}
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([version])
}

// Roadmap models
model Roadmap {
  id              String       @id @default(uuid())
  userId          String
  roadmap_type    RoadmapType
  profileSnapshot Json         // snapshot of QuizResult.computedProfile used for generation
  jsonRoadmap     Json         // generated tasks/days
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  objectives      Objective[]
  progresses      Progress[]

  @@index([userId, roadmap_type])
}

model Objective {
  id          String          @id @default(uuid())
  roadmapId   String?
  title       String
  description String?
  dueDate     DateTime?
  status      ObjectiveStatus @default(todo)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  roadmap     Roadmap?        @relation(fields: [roadmapId], references: [id], onDelete: SetNull)
}

model Progress {
  id                  String   @id @default(uuid())
  userId              String
  roadmapId           String
  completedTasks      Json     // list of completed task IDs from Roadmap.jsonRoadmap
  completedObjectives Int      @default(0)
  streak              Int      @default(0)
  lastActivityAt      DateTime @default(now())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  roadmap             Roadmap  @relation(fields: [roadmapId], references: [id], onDelete: Cascade)

  @@unique([userId, roadmapId])
  @@index([userId])
}

enum RoadmapType {
  seven_day   @map("7-day")
  thirty_day  @map("30-day")
}

enum ObjectiveStatus {
  todo
  doing
  done
}

enum SubscriptionStatus {
  free
  active
  canceled
  expired
}

// Subscription models
model SubscriptionPlan {
  id          String   @id @default(uuid())
  code        String   @unique
  name        String
  description String?
  price       Float
  currency    String
  regionCode  String   // e.g., 'US', 'FR', 'SN'
  interval    String   // 'monthly', 'yearly'
  features    Json     // Array of features included in this plan
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  users       User[]
  
  @@index([regionCode])
  @@index([isActive])
}
