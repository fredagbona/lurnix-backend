datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Language {
  en
  fr
}

enum PlanType {
  free
  builder
  master
}

enum BillingCycle {
  monthly
  six_months    @map("6_months")
  twelve_months @map("12_months")
}

enum UserSubscriptionStatus {
  pending
  active
  cancelled
  expired
  paused
}

enum CouponDiscountType {
  percentage
  fixed_amount
}

enum CouponAppliesTo {
  all
  plan_type
  specific_plan
}

enum InvoiceStatus {
  pending
  paid
  failed
  refunded
}

enum FeatureStatus {
  open
  under_review
  in_progress
  released
  declined
}

enum FeatureCategory {
  Roadmaps
  AI_Mentor
  Community
  Integrations
  Payments
  UX
  Other
}

model User {
  id               String    @id @default(uuid())
  username         String    @unique
  fullname         String
  email            String    @unique
  password_hash    String?
  googleId         String?   @unique
  githubId         String?   @unique
  providers        String[]  @default([])
  avatar           String?
  isActive         Boolean   @default(true)
  isVerified       Boolean   @default(false)
  language         Language  @default(en)
  paddleCustomerId String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?

  // Email verification functionality
  verificationToken       String?
  verificationTokenExpiry DateTime?

  // Password reset functionality
  resetToken       String?
  resetTokenExpiry DateTime?

  // Relations
  quizResults      QuizResult[]
  roadmaps         Roadmap[]
  progresses       Progress[]
  subscriptions    UserSubscription[]
  CouponRedemption CouponRedemption[]
  BillingInvoice   BillingInvoice[]
  featureUsages    FeatureUsage[]
  featureRequests  FeatureRequest[]
  featureVotes     FeatureVote[]
  featureStatusChanges FeatureStatusChange[] @relation("FeatureStatusChangedByUser")

}

model Admin {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  password_hash String
  role          AdminRole @default(manager)
  language      Language  @default(en)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Password reset functionality
  resetToken       String?
  resetTokenExpiry DateTime?

  featureStatusChanges FeatureStatusChange[] @relation("FeatureStatusChangedByAdmin")
  featureModNotes      FeatureModNote[]
}

model FeatureRequest {
  id            BigInt          @id @default(autoincrement()) @map("id")
  title         String          @db.VarChar(100) @map("title")
  description   String          @map("description")
  category      FeatureCategory @default(Other) @map("category")
  status        FeatureStatus   @default(open) @map("status")
  authorId      String          @map("author_id")
  votesCount    Int             @default(0) @map("votes_count")
  tags          String[]        @default([]) @map("tags")
  mergedIntoId  BigInt?         @map("merged_into_id")
  locale        Language        @default(en) @map("locale")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  deletedAt     DateTime?       @map("deleted_at")

  author       User                @relation(fields: [authorId], references: [id], onDelete: Restrict)
  votes        FeatureVote[]
  statusHistory FeatureStatusChange[]
  modNotes     FeatureModNote[]
  mergedInto   FeatureRequest?     @relation("FeatureRequestMerge", fields: [mergedIntoId], references: [id])
  mergedChildren FeatureRequest[]  @relation("FeatureRequestMerge")

  @@map("feature_requests")
  @@index([status, votesCount, createdAt], map: "feature_requests_status_votes_created_idx")
  @@index([category, status], map: "feature_requests_category_status_idx")
}

model FeatureVote {
  userId    String   @map("user_id")
  featureId BigInt   @map("feature_id")
  createdAt DateTime @default(now()) @map("created_at")

  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  feature FeatureRequest @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@map("feature_votes")
  @@id([userId, featureId])
}

model FeatureStatusChange {
  id         BigInt         @id @default(autoincrement()) @map("id")
  featureId  BigInt         @map("feature_id")
  oldStatus  FeatureStatus? @map("old_status")
  newStatus  FeatureStatus  @map("new_status")
  changedByUserId String?   @map("changed_by_user_id")
  changedByAdminId String?  @map("changed_by_admin_id")
  note       String?        @map("note")
  createdAt  DateTime       @default(now()) @map("created_at")

  feature   FeatureRequest @relation(fields: [featureId], references: [id], onDelete: Cascade)
  changedByUser User?      @relation("FeatureStatusChangedByUser", fields: [changedByUserId], references: [id], onDelete: Restrict)
  changedByAdmin Admin?    @relation("FeatureStatusChangedByAdmin", fields: [changedByAdminId], references: [id], onDelete: Restrict)

  @@map("feature_status_changes")
  @@index([featureId], map: "feature_status_changes_feature_idx")
}

model FeatureModNote {
  id        BigInt   @id @default(autoincrement()) @map("id")
  featureId BigInt   @map("feature_id")
  authorAdminId  String   @map("author_admin_id")
  note      String   @map("note")
  createdAt DateTime @default(now()) @map("created_at")

  feature FeatureRequest @relation(fields: [featureId], references: [id], onDelete: Cascade)
  authorAdmin  Admin     @relation(fields: [authorAdminId], references: [id], onDelete: Restrict)

  @@map("feature_mod_notes")
  @@index([featureId], map: "feature_mod_notes_feature_idx")
}

enum AdminRole {
  super_admin
  manager
  support
}

// Quiz models
model QuizSection {
  id          String         @id @default(uuid())
  version     Int
  title       String
  description String?
  sortOrder   Int
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  questions   QuizQuestion[]

  @@index([version])
}

model QuizQuestion {
  id             String       @id @default(uuid())
  version        Int
  key            String       @unique
  title          String
  description    String?
  type           String // 'single' | 'multi' | 'scale'
  weightCategory String?
  sortOrder      Int
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  options        QuizOption[]
  sectionId      String?
  section        QuizSection? @relation(fields: [sectionId], references: [id], onDelete: SetNull)

  @@index([version])
  @@index([sectionId])
}

model QuizOption {
  id         String       @id @default(uuid())
  questionId String
  label      String
  value      String
  weights    Json // e.g., { visual:2, handsOn:1, reading:0 }
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  question   QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model QuizResult {
  id              String   @id @default(uuid())
  userId          String
  version         Int
  answers         Json // raw answers
  computedProfile Json // resolved profile {style, goal, time, ...}
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([version])
}

// Roadmap models
model Roadmap {
  id              String      @id @default(uuid())
  userId          String
  roadmap_type    RoadmapType
  profileSnapshot Json // snapshot of QuizResult.computedProfile used for generation
  jsonRoadmap     Json // generated tasks/days
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  objectives      Objective[]
  progresses      Progress[]

  @@index([userId, roadmap_type])
}

model Objective {
  id          String          @id @default(uuid())
  roadmapId   String?
  title       String
  description String?
  dueDate     DateTime?
  status      ObjectiveStatus @default(todo)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  roadmap     Roadmap?        @relation(fields: [roadmapId], references: [id], onDelete: SetNull)
}

model Progress {
  id                  String   @id @default(uuid())
  userId              String
  roadmapId           String
  completedTasks      Json // list of completed task IDs from Roadmap.jsonRoadmap
  completedObjectives Int      @default(0)
  streak              Int      @default(0)
  lastActivityAt      DateTime @default(now())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  roadmap             Roadmap  @relation(fields: [roadmapId], references: [id], onDelete: Cascade)

  @@unique([userId, roadmapId])
  @@index([userId])
}

enum RoadmapType {
  seven_day  @map("7-day")
  thirty_day @map("30-day")
}

enum ObjectiveStatus {
  todo
  doing
  done
}

// Subscription models
model SubscriptionPlan {
  id                 String       @id @default(uuid())
  planType           PlanType
  name               String
  description        String?
  billingCycle       BillingCycle
  pricePerPeriod     Decimal      @db.Decimal(10, 2)
  billingAmount      Decimal      @db.Decimal(10, 2)
  commitmentMonths   Int          @default(1)
  discountPercentage Int          @default(0)
  features           Json
  limits             Json
  stripePriceId      String?
  paddlePriceId      String?
  paddleProductId    String?
  isActive           Boolean      @default(true)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  userSubscriptions UserSubscription[]

  @@unique([planType, billingCycle])
  @@index([isActive])
}

model UserSubscription {
  id                   String                 @id @default(uuid())
  userId               String
  planId               String
  status               UserSubscriptionStatus @default(active)
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  commitmentEndDate    DateTime?
  autoRenewal          Boolean                @default(true)
  stripeSubscriptionId String?
  paddleSubscriptionId String?
  paddleCheckoutId     String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  cancelledAt          DateTime?

  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan              SubscriptionPlan   @relation(fields: [planId], references: [id])
  couponRedemptions CouponRedemption[]
  invoices          BillingInvoice[]
  featureUsages     FeatureUsage[]

  @@index([userId])
  @@index([planId])
  @@index([status])
}

model FeatureUsage {
  id             String   @id @default(uuid())
  userId         String
  subscriptionId String?
  feature        String
  used           Int      @default(0)
  periodStart    DateTime
  periodEnd      DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription UserSubscription? @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@unique([userId, feature, periodStart, periodEnd])
  @@index([userId, feature])
}

model Coupon {
  id                 String             @id @default(uuid())
  code               String             @unique
  name               String
  description        String?
  discountType       CouponDiscountType
  discountValue      Decimal            @db.Decimal(10, 2)
  appliesTo          CouponAppliesTo    @default(all)
  appliesToValue     String?
  minimumCommitment  BillingCycle?
  firstTimeUsersOnly Boolean            @default(false)
  maxRedemptions     Int?
  currentRedemptions Int                @default(0)
  maxPerUser         Int?
  validFrom          DateTime           @default(now())
  validUntil         DateTime?
  isActive           Boolean            @default(true)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  redemptions    CouponRedemption[]
  BillingInvoice BillingInvoice[]

  @@index([isActive])
  @@index([validFrom])
  @@index([validUntil])
}

model CouponRedemption {
  id             String   @id @default(uuid())
  couponId       String
  userId         String
  subscriptionId String?
  discountAmount Decimal  @db.Decimal(10, 2)
  redeemedAt     DateTime @default(now())

  coupon       Coupon            @relation(fields: [couponId], references: [id], onDelete: Cascade)
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription UserSubscription? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)

  @@index([couponId])
  @@index([userId])
  @@index([subscriptionId])
}

model BillingInvoice {
  id                 String        @id @default(uuid())
  userId             String
  subscriptionId     String
  invoiceNumber      String        @unique
  amount             Decimal       @db.Decimal(10, 2)
  discountAmount     Decimal       @default(0) @db.Decimal(10, 2)
  finalAmount        Decimal       @db.Decimal(10, 2)
  currency           String        @default("USD")
  status             InvoiceStatus @default(pending)
  stripeInvoiceId    String?
  couponId           String?
  billingPeriodStart DateTime
  billingPeriodEnd   DateTime
  dueDate            DateTime
  paidAt             DateTime?
  createdAt          DateTime      @default(now())

  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription UserSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  coupon       Coupon?          @relation(fields: [couponId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([subscriptionId])
  @@index([couponId])
  @@index([status])
}
