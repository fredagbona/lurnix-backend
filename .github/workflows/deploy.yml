name: Deploy lurnix-backend

on:
  push:
    branches:
      - prod

concurrency:
  group: deploy-prod
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Package exactly the repo content at HEAD (no .git, no node_modules)
      - name: Package source with git archive
        run: |
          git archive --format=tar.gz -o repo.tar.gz HEAD

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "${{ secrets.DEPLOY_HOST }}" >> ~/.ssh/known_hosts

      - name: Upload & deploy on server (extract, install, migrate, build, reload)
        run: |
          scp repo.tar.gz "${{ secrets.DEPLOY_USER }}"@"${{ secrets.DEPLOY_HOST }}":/var/www/lurnix/lurnix-backend/

          ssh "${{ secrets.DEPLOY_USER }}"@"${{ secrets.DEPLOY_HOST }}" \
            SHA="${{ github.sha }}" SEED="${{ secrets.SEED }}" bash -lc '
            set -euo pipefail

            PROJECT_DIR="/var/www/lurnix/lurnix-backend"
            cd "$PROJECT_DIR"

            # Extract new code and tidy
            tar -xzf repo.tar.gz
            rm -f repo.tar.gz

            # Ensure env & logs
            ln -sfn "$PROJECT_DIR/shared/.env" .env
            mkdir -p "$PROJECT_DIR/shared/logs"

            # If node comes from nvm, expose it in this non-login shell
            if [ -s "$HOME/.nvm/nvm.sh" ]; then
              . "$HOME/.nvm/nvm.sh"
              nvm use --lts >/dev/null 2>&1 || true
            fi

            # Install deps deterministically
            npm ci

            # Prisma: client + prod-safe migrations
            npx prisma generate
            npm run db:migrate || npx prisma migrate deploy

            # Optional seed
            if [ "${SEED:-}" = "true" ]; then
              echo "Running seed..."
              npm run db:seed || echo "Seed failed or skipped."
            fi

            # Build with increased Node heap (fixes OOM)
            NODE_OPTIONS="--max-old-space-size=3072" npm run build

            # Safety fallback to ensure templates present
            [ -d src/services/templates ] && cp -r src/services/templates dist/services || true

            # Assert critical artifacts
            test -d dist/services/templates || { echo "❌ Missing dist/services/templates"; exit 1; }
            test -s swagger.json || { echo "❌ swagger.json missing after build"; exit 1; }

            # Write deployed version
            echo "${SHA:-unknown} $(date -Iseconds)" > VERSION

            # PM2 start/reload
            if pm2 describe lurnix-backend >/dev/null 2>&1; then
              pm2 reload lurnix-backend --update-env
            else
              pm2 start ecosystem.config.js --env production
            fi
            pm2 save

            echo "✅ Deploy complete."
            head -n1 VERSION || true
          '
