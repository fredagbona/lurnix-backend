name: Deploy lurnix-backend

on:
  push:
    branches:
      - prod

concurrency:
  group: deploy-prod
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (metadata only)
        uses: actions/checkout@v4

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "${{ secrets.DEPLOY_HOST }}" >> ~/.ssh/known_hosts

      - name: Remote deploy (git fetch/reset, install, migrate, build, reload)
        env:
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          SEED_SECRET: ${{ secrets.SEED }}   # optional; can be empty
        run: |
          set -euo pipefail

          # Build ssh command, include SEED only if provided
          if [ -n "${SEED_SECRET:-}" ]; then
            SSH_CMD=(ssh "${DEPLOY_USER}@${DEPLOY_HOST}" SEED="${SEED_SECRET}")
          else
            SSH_CMD=(ssh "${DEPLOY_USER}@${DEPLOY_HOST}")
          fi

          # Run the remote script via a single-quoted heredoc (prevents local expansion)
          "${SSH_CMD[@]}" -T <<'REMOTE'
          set -euo pipefail

          PROJECT_DIR="/var/www/lurnix/lurnix-backend"
          cd "$PROJECT_DIR"

          # Ensure env + logs
          ln -sfn "$PROJECT_DIR/shared/.env" .env
          mkdir -p "$PROJECT_DIR/shared/logs"

          # Update to latest prod (server has deploy key in ~/.ssh/config)
          git remote -v
          git fetch --all --prune
          git checkout prod
          git reset --hard origin/prod
          CURRENT_SHA=$(git rev-parse --short HEAD)

          # If Node is via nvm, expose it in this non-login shell
          if [ -s "$HOME/.nvm/nvm.sh" ]; then
            . "$HOME/.nvm/nvm.sh"
            nvm use --lts >/dev/null 2>&1 || true
          fi

          # Install deps deterministically
          npm ci

          # Prisma (prod-safe)
          npx prisma generate
          npx prisma migrate deploy

          # Optional seed (only if SEED was injected by CI)
          if [ "${SEED:-}" = "true" ]; then
            echo "Running seed..."
            npm run db:seed || echo "Seed failed or skipped."
          fi

          # Build with larger heap to avoid OOM 137
          NODE_OPTIONS="--max-old-space-size=4096" npm run build

          # Safety fallback for email templates
          [ -d src/services/templates ] && cp -r src/services/templates dist/services || true

          # Assert critical artifacts
          test -d dist/services/templates || { echo "❌ Missing dist/services/templates"; exit 1; }
          test -s swagger.json || { echo "❌ swagger.json missing after build"; exit 1; }

          # Record running version
          echo "${CURRENT_SHA} $(date -Iseconds)" > VERSION

          # Start or reload PM2
          if pm2 describe lurnix-backend >/dev/null 2>&1; then
            pm2 reload lurnix-backend --update-env
          else
            pm2 start ecosystem.config.js --env production
          fi
          pm2 save

          echo "✅ Deploy complete. Version:"
          cat VERSION
          REMOTE
