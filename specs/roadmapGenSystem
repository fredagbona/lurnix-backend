# Lurnix AI Roadmap Generation System - Backend Specification

## Overview
This document specifies the complete AI-powered roadmap generation system for Lurnix, including user profiling, pedagogical approaches, personalized content generation, and adaptive learning paths.

## 1. System Architecture

### Core Components
```typescript
interface RoadmapGenerationSystem {
  userProfileService: UserProfileService
  pedagogicalEngine: PedagogicalEngine
  aiService: LurnixAIService
  roadmapBuilder: RoadmapBuilder
  adaptationEngine: AdaptationEngine
  progressTracker: ProgressTracker
}
```

### AI Integration Options
```typescript
enum AIProvider {
  LM_STUDIO = 'lm_studio',    // Development: Local LM Studio
  GROQ = 'groq',              // Production: Groq API
  OLLAMA = 'ollama'           // Self-hosted: Ollama on VPS
}

interface AIConfiguration {
  provider: AIProvider
  model: string
  apiUrl: string
  maxTokens: number
  temperature: number
}
```

## 2. User Profiling System

### Learner Profile Types
```typescript
enum LearnerProfileType {
  VISUAL_LEARNER = 'visual_learner',
  PRACTICAL_BUILDER = 'practical_builder', 
  ANALYTICAL_THINKER = 'analytical_thinker',
  SOCIAL_COLLABORATOR = 'social_collaborator',
  CREATIVE_EXPLORER = 'creative_explorer',
  STRUCTURED_PLANNER = 'structured_planner',
  INDEPENDENT_RESEARCHER = 'independent_researcher',
  GOAL_ORIENTED_ACHIEVER = 'goal_oriented_achiever'
}
```

### Profile Data Structure
```typescript
interface UserProfile {
  // Static profile from quiz
  profileType: LearnerProfileType
  strengths: string[]
  challenges: string[]
  recommendedApproaches: string[]
  
  // Learning preferences
  learningGoal: string
  targetStack?: string
  experienceLevel: 'beginner' | 'intermediate' | 'advanced'
  timeCommitmentHoursPerWeek: number
  priorExperience?: string
  
  // Contextual information
  motivationType: 'career' | 'hobby' | 'startup' | 'skill_upgrade'
  timeline: 'weeks' | 'months' | 'no_deadline'
  preferredProjectTypes: string[]
  
  // Dynamic data (updated over time)
  frustrationTriggers: string[]
  successPatterns: string[]
  preferredResponseStyle: 'encouraging' | 'direct' | 'detailed' | 'concise'
  currentConfidenceLevel: number // 1-10
  learningVelocity: number // concepts per week
}
```

### Database Schema
```sql
-- User profiles table
CREATE TABLE user_profiles (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES users(id),
  profile_type VARCHAR(50) NOT NULL,
  strengths JSONB NOT NULL DEFAULT '[]',
  challenges JSONB NOT NULL DEFAULT '[]',
  recommended_approaches JSONB NOT NULL DEFAULT '[]',
  learning_goal TEXT,
  target_stack VARCHAR(100),
  experience_level VARCHAR(20),
  time_commitment_hours_per_week INTEGER,
  prior_experience TEXT,
  motivation_type VARCHAR(50),
  timeline VARCHAR(50),
  preferred_project_types JSONB DEFAULT '[]',
  frustration_triggers JSONB DEFAULT '[]',
  success_patterns JSONB DEFAULT '[]',
  preferred_response_style VARCHAR(50) DEFAULT 'encouraging',
  current_confidence_level INTEGER DEFAULT 5,
  learning_velocity DECIMAL(3,2) DEFAULT 1.0,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Learning events for behavioral tracking
CREATE TABLE learning_events (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES users(id),
  event_type VARCHAR(50) NOT NULL, -- 'milestone_completed', 'struggle_detected', 'breakthrough_moment'
  content TEXT,
  metadata JSONB,
  confidence_impact INTEGER, -- -5 to +5
  timestamp TIMESTAMP DEFAULT NOW()
);
```

## 3. Pedagogical Engine

### Teaching Strategies
```typescript
interface TeachingStrategy {
  name: string
  description: string
  applicableProfiles: LearnerProfileType[]
  techniques: string[]
  promptModifiers: PromptModifier[]
}

interface PromptModifier {
  condition: string
  modification: string
  priority: number
}
```

### Core Pedagogical Approaches
```typescript
const TEACHING_STRATEGIES = {
  socratic_questioning: {
    name: "Socratic Questioning",
    description: "Guide learners to discover answers through questions",
    applicableProfiles: [LearnerProfileType.ANALYTICAL_THINKER, LearnerProfileType.INDEPENDENT_RESEARCHER],
    techniques: [
      "Ask leading questions instead of giving direct answers",
      "Use 'What do you think would happen if...' prompts",
      "Challenge assumptions respectfully",
      "Guide through logical deduction"
    ],
    promptModifiers: [
      {
        condition: "user_asks_direct_question",
        modification: "Respond with clarifying questions that lead to discovery",
        priority: 1
      }
    ]
  },
  
  hands_on_building: {
    name: "Learning by Building",
    description: "Emphasize practical projects and immediate application",
    applicableProfiles: [LearnerProfileType.PRACTICAL_BUILDER, LearnerProfileType.GOAL_ORIENTED_ACHIEVER],
    techniques: [
      "Provide concrete, buildable examples",
      "Focus on immediate practical applications",
      "Minimize theoretical explanations",
      "Encourage experimentation"
    ]
  },
  
  visual_conceptual: {
    name: "Visual Learning Support",
    description: "Use analogies, diagrams, and visual explanations",
    applicableProfiles: [LearnerProfileType.VISUAL_LEARNER, LearnerProfileType.CREATIVE_EXPLORER],
    techniques: [
      "Use rich analogies and metaphors",
      "Describe concepts in visual terms",
      "Reference diagrams and flowcharts",
      "Create mental models"
    ]
  },
  
  collaborative_social: {
    name: "Social Learning",
    description: "Emphasize community interaction and peer learning",
    applicableProfiles: [LearnerProfileType.SOCIAL_COLLABORATOR],
    techniques: [
      "Suggest community resources",
      "Encourage sharing and discussion",
      "Reference collaborative projects",
      "Promote peer learning opportunities"
    ]
  }
}
```

### Master Prompt System
```typescript
interface MasterPromptTemplate {
  systemPrompt: string
  behavioralRules: string[]
  adaptationInstructions: string[]
  profileSpecificModifications: Record<LearnerProfileType, string>
  contextEnrichment: string[]
}

const LURNIX_MASTER_PROMPT = {
  systemPrompt: `You are Lurnix, a revolutionary AI mentor specialized in personalized technology learning.

CORE PERSONALITY:
- Empathetic but challenging mentor who develops learners' critical thinking
- Never gives direct answers when learners can discover them through guidance
- Adapts teaching style based on individual learning profiles
- Encourages experimentation and celebrates learning from failures
- Maintains high standards while being supportively encouraging

PEDAGOGICAL PHILOSOPHY:
- Socratic method: Guide through questions rather than lectures
- Active learning: Emphasize hands-on practice over passive consumption
- Growth mindset: Frame challenges as opportunities for development
- Contextual learning: Connect concepts to real-world applications
- Metacognition: Help learners understand their own learning process

BEHAVIORAL RULES:
1. NEVER provide direct solutions if the learner can discover them
2. ALWAYS ask follow-up questions to deepen understanding
3. Challenge assumptions respectfully and constructively  
4. Encourage experimentation and learning from mistakes
5. Adapt communication style to the learner's profile and current emotional state
6. Celebrate progress and acknowledge effort, not just results`,

  behavioralRules: [
    "Avoid giving direct answers to questions the learner can solve",
    "Use questions to guide thinking: 'What do you think would happen if...'",
    "Challenge learner assumptions with curiosity, not judgment",
    "Frame difficulties as normal parts of the learning journey",
    "Adapt language complexity to learner's current confidence level"
  ],
  
  profileSpecificModifications: {
    [LearnerProfileType.PRACTICAL_BUILDER]: `
ADAPTATION FOR PRACTICAL BUILDER:
- Prioritize concrete examples and working code
- Skip lengthy theoretical explanations
- Focus on immediate practical applications
- Encourage rapid prototyping and iteration
- Use "Let's build something" rather than "Let's understand the theory"`,
    
    [LearnerProfileType.ANALYTICAL_THINKER]: `
ADAPTATION FOR ANALYTICAL THINKER:
- Provide systematic, logical explanations
- Encourage breaking down complex problems methodically
- Discuss underlying principles and patterns
- Use precise, technical language
- Support deep investigation of concepts before moving forward`,
    
    [LearnerProfileType.VISUAL_LEARNER]: `
ADAPTATION FOR VISUAL LEARNER:
- Use rich analogies and metaphors consistently
- Describe concepts in visual, spatial terms
- Reference diagrams, flowcharts, and visual patterns
- Create mental models and conceptual frameworks
- Use "imagine" and "picture this" language patterns`
  }
}
```

## 4. Roadmap Generation Engine

### Roadmap Structure
```typescript
interface Roadmap {
  id: string
  userId: string
  title: string
  description: string
  duration: '7_days' | '14_days' | '30_days'
  difficulty: 'beginner' | 'intermediate' | 'advanced'
  learningGoal: string
  targetStack?: string
  
  // Pedagogical metadata
  teachingApproach: string[]
  adaptationNotes: string
  
  // Content structure
  milestones: Milestone[]
  estimatedTotalHours: number
  
  // Tracking
  progress: number // 0-100
  currentMilestone?: string
  completedSteps: string[]
  
  // Timestamps
  createdAt: Date
  updatedAt: Date
  lastAccessedAt?: Date
}

interface Milestone {
  id: string
  title: string
  description: string
  order: number
  estimatedHours: number
  
  // Learning objectives
  objectives: string[]
  prerequisites: string[]
  
  // Content
  steps: LearningStep[]
  
  // Assessment
  checkpointCriteria: string[]
  deliverable?: Deliverable
  
  // Progress tracking
  isCompleted: boolean
  completedAt?: Date
}

interface LearningStep {
  id: string
  title: string
  description: string
  type: 'concept' | 'practice' | 'project' | 'assessment' | 'reflection'
  order: number
  estimatedHours: number
  
  // Content
  content: string
  resources: Resource[]
  exercises: Exercise[]
  
  // Pedagogical approach
  teachingMethod: string
  difficultyLevel: number // 1-5
  
  // Progress
  isCompleted: boolean
  completedAt?: Date
  userFeedback?: string
}

interface Resource {
  title: string
  url?: string
  type: 'article' | 'video' | 'course' | 'book' | 'tool' | 'exercise' | 'documentation'
  description: string
  estimatedTime?: number
  difficulty?: number
  isRequired: boolean
}

interface Exercise {
  id: string
  title: string
  description: string
  type: 'coding' | 'conceptual' | 'project' | 'quiz' | 'reflection'
  instructions: string
  expectedOutcome: string
  hints?: string[]
  solution?: string
}

interface Deliverable {
  title: string
  description: string
  type: 'code_project' | 'portfolio_piece' | 'presentation' | 'written_reflection'
  requirements: string[]
  successCriteria: string[]
}
```

### Database Schema
```sql
-- Roadmaps table
CREATE TABLE roadmaps (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES users(id),
  title VARCHAR(255) NOT NULL,
  description TEXT,
  duration VARCHAR(20) NOT NULL,
  difficulty VARCHAR(20) NOT NULL,
  learning_goal TEXT NOT NULL,
  target_stack VARCHAR(100),
  teaching_approach JSONB DEFAULT '[]',
  adaptation_notes TEXT,
  estimated_total_hours INTEGER,
  progress INTEGER DEFAULT 0,
  current_milestone VARCHAR(255),
  completed_steps JSONB DEFAULT '[]',
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  last_accessed_at TIMESTAMP
);

-- Milestones table
CREATE TABLE milestones (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  roadmap_id UUID NOT NULL REFERENCES roadmaps(id) ON DELETE CASCADE,
  title VARCHAR(255) NOT NULL,
  description TEXT,
  order_index INTEGER NOT NULL,
  estimated_hours INTEGER,
  objectives JSONB DEFAULT '[]',
  prerequisites JSONB DEFAULT '[]',
  checkpoint_criteria JSONB DEFAULT '[]',
  deliverable JSONB,
  is_completed BOOLEAN DEFAULT false,
  completed_at TIMESTAMP,
  created_at TIMESTAMP DEFAULT NOW()
);

-- Learning steps table  
CREATE TABLE learning_steps (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  milestone_id UUID NOT NULL REFERENCES milestones(id) ON DELETE CASCADE,
  title VARCHAR(255) NOT NULL,
  description TEXT,
  type VARCHAR(50) NOT NULL,
  order_index INTEGER NOT NULL,
  estimated_hours INTEGER,
  content TEXT,
  teaching_method VARCHAR(100),
  difficulty_level INTEGER DEFAULT 3,
  is_completed BOOLEAN DEFAULT false,
  completed_at TIMESTAMP,
  user_feedback TEXT,
  created_at TIMESTAMP DEFAULT NOW()
);

-- Resources table
CREATE TABLE step_resources (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  step_id UUID NOT NULL REFERENCES learning_steps(id) ON DELETE CASCADE,
  title VARCHAR(255) NOT NULL,
  url TEXT,
  type VARCHAR(50) NOT NULL,
  description TEXT,
  estimated_time INTEGER,
  difficulty INTEGER,
  is_required BOOLEAN DEFAULT false,
  order_index INTEGER DEFAULT 0
);

-- Exercises table
CREATE TABLE step_exercises (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  step_id UUID NOT NULL REFERENCES learning_steps(id) ON DELETE CASCADE,
  title VARCHAR(255) NOT NULL,
  description TEXT,
  type VARCHAR(50) NOT NULL,
  instructions TEXT,
  expected_outcome TEXT,
  hints JSONB DEFAULT '[]',
  solution TEXT,
  order_index INTEGER DEFAULT 0
);
```

## 5. AI Service Implementation

### Core AI Service Interface
```typescript
interface LurnixAIService {
  // Roadmap generation
  generateRoadmap(request: GenerateRoadmapRequest): Promise<GenerateRoadmapResponse>
  
  // Interactive mentoring
  mentorChat(userId: string, message: string, context?: ChatContext): Promise<MentorResponse>
  
  // Content adaptation
  adaptContent(content: string, userProfile: UserProfile, context: AdaptationContext): Promise<string>
  
  // Assessment and feedback
  generateFeedback(submission: UserSubmission, criteria: AssessmentCriteria): Promise<Feedback>
}

interface GenerateRoadmapRequest {
  userId: string
  userProfile: UserProfile
  learningGoal: string
  targetStack?: string
  duration: '7_days' | '14_days' | '30_days'
  currentSkillLevel?: string
  specificRequirements?: string[]
  contextualPreferences?: Record<string, any>
}

interface ChatContext {
  userProfile: UserProfile
  currentRoadmap?: Roadmap
  recentConversations: string[]
  learningHistory: LearningEvent[]
  currentEmotionalState?: EmotionalState
}

interface EmotionalState {
  frustrationLevel: number // 1-10
  confidenceLevel: number // 1-10
  motivationLevel: number // 1-10
  stressIndicators: string[]
  recentSuccesses: string[]
}
```

### Prompt Generation System
```typescript
class PromptGenerator {
  generateRoadmapPrompt(request: GenerateRoadmapRequest): string {
    const { userProfile, learningGoal, duration, targetStack } = request
    
    return `${LURNIX_MASTER_PROMPT.systemPrompt}

${this.getProfileAdaptation(userProfile.profileType)}

ROADMAP GENERATION MISSION:
Create a personalized ${duration.replace('_', '-')} learning roadmap for achieving: "${learningGoal}"

USER CONTEXT:
- Learning Profile: ${userProfile.profileType}
- Experience Level: ${userProfile.experienceLevel}
- Time Commitment: ${userProfile.timeCommitmentHoursPerWeek} hours/week
- Target Stack: ${targetStack || 'Not specified'}
- Strengths: ${userProfile.strengths.join(', ')}
- Challenges: ${userProfile.challenges.join(', ')}
- Motivation: ${userProfile.motivationType}

PEDAGOGICAL REQUIREMENTS:
1. Structure using progressive complexity (Scaffold Learning)
2. Include hands-on projects, not just theory
3. Add reflection checkpoints for metacognitive development  
4. Provide multiple resource types to match learning preferences
5. Include realistic time estimates based on stated commitment
6. Design challenges that build on previous learning
7. Incorporate the user's strengths and address their challenges

ROADMAP STRUCTURE REQUIREMENTS:
- 3-5 major milestones with clear learning objectives
- Each milestone should have 2-4 learning steps
- Each step should include practical exercises
- Provide 2-3 resources per step (mix of articles, videos, hands-on practice)
- Include a concrete deliverable for each milestone
- Estimate hours realistically based on experience level

ADAPTATION NOTES:
${this.getTeachingStrategyInstructions(userProfile)}

Respond with a complete roadmap following the JSON structure specified.
Do not include explanatory text outside the JSON structure.`
  }

  generateMentorChatPrompt(userId: string, message: string, context: ChatContext): string {
    const { userProfile, currentRoadmap, recentConversations, currentEmotionalState } = context
    
    return `${LURNIX_MASTER_PROMPT.systemPrompt}

${this.getProfileAdaptation(userProfile.profileType)}

CURRENT USER CONTEXT:
- Name: User (personalize appropriately)
- Learning Profile: ${userProfile.profileType}
- Current Confidence: ${currentEmotionalState?.confidenceLevel || 'Unknown'}/10
- Current Frustration: ${currentEmotionalState?.frustrationLevel || 'Unknown'}/10

${currentRoadmap ? `
ACTIVE ROADMAP: "${currentRoadmap.title}"
- Progress: ${currentRoadmap.progress}%
- Current Focus: ${currentRoadmap.currentMilestone}
- Recent Completions: ${currentRoadmap.completedSteps.slice(-3).join(', ')}
` : ''}

${recentConversations.length > 0 ? `
RECENT CONVERSATION CONTEXT:
${recentConversations.slice(-3).join('\n')}
` : ''}

${currentEmotionalState?.stressIndicators.length ? `
DETECTED STRESS INDICATORS: ${currentEmotionalState.stressIndicators.join(', ')}
ADAPTATION: Provide extra encouragement and simpler explanations
` : ''}

CURRENT MESSAGE: "${message}"

RESPONSE INSTRUCTIONS:
1. Maintain your pedagogical approach while being emotionally responsive
2. Reference their roadmap progress when relevant
3. Use their preferred communication style: ${userProfile.preferredResponseStyle}
4. If they're frustrated, focus on encouragement and breaking problems down
5. If they're confident, provide appropriate challenges
6. Always end with a question or suggestion for next steps when appropriate

Respond as Lurnix with appropriate personality and pedagogical approach.`
  }
}
```

### AI Provider Abstraction
```typescript
abstract class AIProvider {
  abstract generateCompletion(prompt: string, options: CompletionOptions): Promise<string>
  abstract healthCheck(): Promise<boolean>
}

class LMStudioProvider extends AIProvider {
  private apiUrl = 'http://localhost:1234/v1'
  
  async generateCompletion(prompt: string, options: CompletionOptions): Promise<string> {
    const response = await fetch(`${this.apiUrl}/chat/completions`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        model: 'llama-3.1-8b-instruct',
        messages: [{ role: 'system', content: prompt }],
        max_tokens: options.maxTokens || 2000,
        temperature: options.temperature || 0.7
      })
    })
    
    const data = await response.json()
    return data.choices[0].message.content
  }
}

class GroqProvider extends AIProvider {
  private client: Groq
  
  async generateCompletion(prompt: string, options: CompletionOptions): Promise<string> {
    const completion = await this.client.chat.completions.create({
      messages: [{ role: 'system', content: prompt }],
      model: 'llama-3.1-8b-instant',
      max_tokens: options.maxTokens || 2000,
      temperature: options.temperature || 0.7
    })
    
    return completion.choices[0].message.content
  }
}
```

## 6. API Endpoints

### Roadmap Generation Endpoints
```
POST /api/roadmaps/generate
Body: {
  learning_goal: string,
  target_stack?: string,
  duration: '7_days' | '14_days' | '30_days',
  specific_requirements?: string[]
}
Headers: Authorization
Response: { roadmap: Roadmap, generation_metadata: object }

GET /api/roadmaps
Headers: Authorization
Query: ?status=active|completed|archived&page=1&limit=10
Response: { roadmaps: Roadmap[], pagination: PaginationInfo }

GET /api/roadmaps/:id
Headers: Authorization
Response: { roadmap: Roadmap }

PUT /api/roadmaps/:id/progress
Body: { milestone_id?: string, step_id?: string, action: 'complete' | 'uncomplete' }
Headers: Authorization
Response: { updated_roadmap: Roadmap }
```

### Mentor Chat Endpoints
```
POST /api/mentor/chat
Body: { message: string, conversation_id?: string }
Headers: Authorization
Response: { 
  response: string, 
  conversation_id: string,
  teaching_strategy_used: string,
  adaptation_applied?: string
}

GET /api/mentor/conversations
Headers: Authorization
Query: ?page=1&limit=20
Response: { conversations: Conversation[], pagination: PaginationInfo }

GET /api/mentor/context
Headers: Authorization
Response: { 
  user_profile: UserProfile,
  current_roadmap?: Roadmap,
  recent_progress: LearningEvent[],
  emotional_state: EmotionalState
}
```

### Profile & Adaptation Endpoints
```
PUT /api/profile/learning-preferences
Body: { 
  preferred_response_style?: string,
  frustration_triggers?: string[],
  success_patterns?: string[]
}
Headers: Authorization
Response: { updated_profile: UserProfile }

POST /api/profile/feedback
Body: { 
  interaction_type: string,
  satisfaction_score: number,
  feedback_text?: string
}
Headers: Authorization  
Response: { success: boolean }

GET /api/profile/learning-analytics
Headers: Authorization
Response: {
  learning_velocity: number,
  confidence_trend: number[],
  preferred_content_types: string[],
  most_effective_teaching_methods: string[]
}
```

## 7. Performance & Quality Requirements

### Response Time Targets
- Roadmap generation: < 30 seconds
- Mentor chat responses: < 5 seconds  
- Progress updates: < 1 second
- Profile adaptations: < 2 seconds

### Quality Metrics
- Roadmap relevance score: > 8/10 (user rating)
- Learning objective achievement: > 80%
- User engagement retention: > 70% weekly active
- Adaptive accuracy: > 85% of adaptations perceived as helpful

### Scalability Requirements
- Support for 1000+ concurrent roadmap generations
- Handle 10,000+ chat messages per hour
- Process user adaptations in real-time
- Maintain < 99.5% uptime for core AI services

## 8. Testing Strategy

### Unit Tests
- Prompt generation with various user profiles
- Roadmap structure validation
- Teaching strategy application
- Progress calculation logic
- Profile adaptation algorithms

### Integration Tests  
- End-to-end roadmap generation flow
- Chat conversation continuity
- Progress tracking across sessions
- AI provider failover scenarios
- Database consistency during updates

### User Experience Tests
- A/B testing different prompt strategies
- Learning outcome measurement
- User satisfaction tracking
- Adaptive personalization effectiveness
- Content recommendation accuracy

This specification provides a complete foundation for implementing Lurnix's AI-powered roadmap generation system with advanced personalization and pedagogical intelligence.